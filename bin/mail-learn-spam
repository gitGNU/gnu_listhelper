#!/bin/sh

# Process messages misclassified as ham in caughtham and moved
# manually into the spam-new folder.

# Copyright 2006, 2007, 2008, 2010 Bob Proulx <bob@proulx.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Mailman moderator messages are structured with three mime encoded parts.
# Part 1: A top mailman introduction message.
# Part 2: The original message to the mailing list.
# Part 3: A bottom mailman control message.
#
# Replying to the 3rd part will discard the message.
#
# The process implemented here is to unpack the mime components of the
# message first into the three components.  Some components
# recursively have sub-components that are also unpacked.  These are
# put into the less than descriptive numbered msgNUM.NUM files.
#
# SpamAssassin is run on the original message payload.  If SA
# classifies the message as spam then a control message back to
# mailman is generated to discard the spam.

# This script assumes that the current working directory is $HOME.
# Files are referenced by a relative path.  Below $HOME we ensure that
# no filenames have spaces in them and therefore we do not need to
# guard against whitespace in filenames.

# Configure how sa-learn will be run.
#sa_learn_spam="sa-learn --spam"
sa_learn_spam="spamc -x -d 192.168.240.11 --learntype=spam"

MAILDIR=Mail

# In /tmp so that a reboot and the associated /tmp purge will clear it.
LOCK=/tmp/$(whoami).mail-learn-spam.lock

# Check for stale locks.
if [ -e $LOCK ]; then
    if [ -n "$(find $LOCK --newermt "1 hour ago" -print 2>/dev/null)" ]; then
	: Older lock file found.  Must be stale.  Complain.
	echo "Old lock found.  Stale?" 1>&2
	ls -ld $LOCK 1>&2
	exit 1
    fi
fi

# Atomic test-and-set operation 'mkdir' used as a semaphore.
if ! mkdir $LOCK 2>/dev/null; then
  : Another process got the semaphore and is now running.  They run, we exit.
  exit 0
fi
: Semaphore $LOCK created.

# On exit remove the flag saying we are running.
trap 'rmdir $LOCK' EXIT

# Look for messages in the queue that are older than a few minutes.
# This gives time for a human to make a mistake and pull it back out
# of the spam-new queue before it is processed by this cron script.
# This uses a GNU find specific construct -newerXY which perfectly
# matches what is needed here.

for f in $(find Mail/spam-new/new Mail/spam-new/cur -ignore_readdir_race -type f ! -newerct "6 minutes ago" -print); do
    : file $f
    # I could move the file to ./tmp so that it can't change after we
    # have started but actually it is sometimes nice to be able to
    # manually catch it before processing and yank it back.  Therefore
    # I am accepting errors that happen here because the file went
    # away during processing.
    if [ ! -f $f ]; then
	# It went away.  Skip it.
	continue
    fi
    : $sa_learn_spam "<" "$f"
    $sa_learn_spam < $f >/dev/null
    rc=$?
    if [ $rc -eq 0 ] || [ $rc -eq 98 ]; then
	# rc=98: This appears to be the return (undocumented) when spamc
	# can't learn the message because it is already learned.
	msgid=$(formail -cx Message-ID < $f)
	# Here is to hoping the message-id is a normal message-id.  It
	# is created by spammers and virus writers and so I suspect
	# the content characters could be unusual.  Think about the
	# problem of if they used ".*" for a message-id.  That could
	# confuse a standard RE grep.  Try to avoid that.
	# Also, other instances of other processes might be moving
	# these files around at the same time.  That is okay.  But it
	# might mean that find/grep here will complain about a file
	# that was there and is now not there.  That is okay to ignore.
	if [ -n "$msgid" ]; then
	    mmfile=$(find Mail/caughtham-mm -name tmp -prune -o -type f -exec grep -F -l "$msgid" {} + 2>/dev/null)
	    # Paranoia causes me to assume that we might hit several
	    # messages, perhaps copies, and not just a single message.
	    for file in $mmfile; do
		if [ -n $file -a -f $file ]; then
		    mailman-discard-nolearn < $file
		fi
	    done
	fi
	mkdir -p $MAILDIR/spam/cur $MAILDIR/spam/new $MAILDIR/spam/tmp
	if safecat $MAILDIR/spam/tmp $MAILDIR/spam/new < $f >/dev/null; then
	    rm -f $f
	fi
    else
	echo "$sa_learn_spam failed $rc on $f"
    fi
done

exit 0
