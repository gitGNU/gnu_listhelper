#!/bin/sh
#
# This script processes a mailman moderator message.
#
# Mailman moderator messages are structured with three mime encoded parts.
# Part 1: A top mailman introduction message.
# Part 2: The original message to the mailing list.
# Part 3: A bottom mailman control message.
#
# Replying to the 3rd part will discard the message.
#
# The process implemented here is to unpack the mime components of the
# message first into the three components.  Some components
# recursively have sub-components that are also unpacked.  These are
# put into the less than descriptive numbered msgNUM.NUM files.
#
# SpamAssassin is run on the original message payload.  If SA
# classifies the message as spam then a control message back to
# mailman is generated to discard the spam.

export LC_ALL=C			# Ensure a standard sort behavior.
umask 02			# Set up for group sharing.
PATH=$PATH:/usr/sbin:/sbin	# for sendmail et al

# Work in a subdirectory.  Set up to clean up when we exit.
trap 'cd / ; rm -rf $TMPDIR' EXIT
TMPDIR=$(mktemp -d) || exit 1

cd $TMPDIR || exit 1

# Read the file from stdin and save to a working copy of the file.
# With the working copy we can then make multiple passes.  We do make
# multiple passes currently.  This is not the performance bottleneck
# though and so has not been optimized to be avoided.

if ! cat > msg0; then
    exit 1
fi

# Unpack the individual mailman encoded parts into separate files.
# This will create msg1, msg2, msg3 corresponding to the three parts
# encoded by mailman.

if ! mime-unpack < msg0; then
    exit 1
fi

# The mime-unpack script unpacks mime attachments but leaves the mime
# content-type header behind as a message header.  Delete this off of
# the message.

if ! sed '1,/^$/d' msg2 > msg2.1; then
    exit 1
fi
if ! sed '1,/^$/d' msg3 > msg3.1; then
    exit 1
fi

if [ ! -s msg2.1 ]; then
    echo Error: zero sized file in second attachment 1>&2
    exit 1
fi

generate_discard_reply()
{
    # Reply to the mailman message with the discard command for that md5sum.
    formail -r < msg3.1 | sendmail -t -oi
}

incr_spam_count()
{
    if [ ! -f $HOME/Mail/spamcounter ]; then
	echo 0 > $HOME/Mail/spamcounter
    fi
    expr $(<$HOME/Mail/spamcounter) + 1 >$HOME/Mail/spamcounter
}

incr_nonspam_count()
{
    if [ ! -f $HOME/Mail/hamcounter ]; then
	echo 0 > $HOME/Mail/hamcounter
    fi
    expr $(<$HOME/Mail/hamcounter) + 1 >$HOME/Mail/hamcounter
}

incr_mail_count()
{
    # Keep some message stats for later graphing.
    if [ ! -f $HOME/Mail/counter ]; then
	echo 0 > $HOME/Mail/counter
    fi
    expr $(<$HOME/Mail/counter) + 1 >$HOME/Mail/counter
}

# The idea here is that if the mailman machine monty-python already
# scored the message as spam then just go with it and avoid running it
# through spamassassin again here.

run_montypython_check()
{
    if sed '/^$/q' msg0 | grep -q "^X-Spam-Checker-Version: .* on monty-python"; then
	if sed '/^$/q' msg0 | grep -q "^X-Spam-Flag: YES"; then
	    isspam=true
	fi
    fi
}

run_spamassassin_check()
{
    $isspam && : msg is spam || : msg is not spam
    if ! spamassassin < msg2.1 > msg2.2; then
	exit 1
    fi
    if grep -q "^X-Spam-Flag: YES" msg2.2; then
	isspam=true
    fi
}

check_msg_digests()
{
    DIGEST=$(sed '1,/^$/d' msg2.1 | md5sum | awk '{print$1}')
    DIGEST_DIR=$HOME/var/digests/$(echo $DIGEST | sed 's/^\(..\).*/\1/')
    DIGEST_FILE=$(echo $DIGEST | sed 's/^..//')
    if [ -f $DIGEST_DIR/$DIGEST_FILE ]; then
	if [ $(<$DIGEST_DIR/$DIGEST_FILE) -gt 7 ]; then
	    isspam=true
	fi
    fi
}

incr_msg_digests()
{
    mkdir -p $DIGEST_DIR
    if [ ! -f $DIGEST_DIR/$DIGEST_FILE ]; then
	echo 0 >$DIGEST_DIR/$DIGEST_FILE
    fi
    expr $(<$DIGEST_DIR/$DIGEST_FILE) + 1 >$DIGEST_DIR/$DIGEST_FILE
}

incr_mail_count

isspam=false

$isspam || check_msg_digests

$isspam || run_montypython_check

$isspam || run_spamassassin_check

$isspam && incr_msg_digests

if $isspam; then
    FOLDER=$HOME/Mail/caughtspam
    generate_discard_reply
    incr_spam_count
else
    FOLDER=$HOME/Mail/caughtham
    incr_nonspam_count
fi

if [ -f msg2.2 ]; then
    mkdir -p $FOLDER/tmp $FOLDER/new $FOLDER/cur
    chmod a+r $FOLDER/new/$(safecat $FOLDER/tmp $FOLDER/new < msg2.2)
fi

FOLDER=${FOLDER}-mm
mkdir -p $FOLDER/tmp $FOLDER/new $FOLDER/cur
chmod a+r $FOLDER/new/$(safecat $FOLDER/tmp $FOLDER/new < msg0)

exit 0
