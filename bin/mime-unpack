#!/usr/bin/env ruby

# This script splits a Mailman moderator message into the component
# parts in the current directory.  Resulting files are named msg1,
# msg2, msg3 through msgN.

# Copyright 2006, 2007, 2008, 2011, 2013 Bob Proulx <bob@proulx.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Depends: librmail-ruby1.8 | librmail-ruby1.6 | librmail-ruby

# Work around Ruby design bug.  Make signals work as early as possible
# to reduce time of race condition.
if __FILE__ == $0               # provide for test frame
  def sighandler(sig)
    trap sig, "DEFAULT"
    exec "kill -#{sig} $$"      # Use external kill as workaround.
    Process.kill sig, $$        # This fails due to ruby misdesign.
  end
  [ :HUP, :INT, :TERM ].each do |sig|
    trap(sig) { sighandler(sig) }
  end
end

require "rmail/parser"

message = RMail::Parser.read(STDIN)

if !message.multipart?()
  $stderr.puts "Error: Not a multipart message."
  exit 1
end

msgnum = 0
message.body.each { |attachment|
  msgnum += 1
  File.open("msg#{msgnum}","w") { |file|
    file.puts attachment
  }
}
